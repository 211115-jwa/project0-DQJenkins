package com.revature.data.postgres;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Set;

import com.revature.beans.Game;
import com.revature.data.GameDAO;
import com.revature.utils.ConnectionUtil;

public class GamePostgres implements GameDAO {
	private ConnectionUtil connUtil = ConnectionUtil.getConnectionUtil();

	@Override
	public Set<Game> getByName(String name) {
		Set<Game> gamesByName = new HashSet<>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from game where name=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, name);
	
			Statement stmt = conn.createStatement();
			ResultSet resultSet = stmt.executeQuery(sql);

			// while the result set has another row
			while (resultSet.next()) {
				Game game = new Game();
				// pull the data from each row in the result set
				// and put it into the java object so that we can use it here
				//id,name,platform,publisher,price,quantityOnHand,quantityOrdered
				game.setId(resultSet.getInt("id"));
				game.setName(resultSet.getString("name"));
				game.setPlatform(resultSet.getString("platform"));
				game.setPublisher(resultSet.getString("publisher"));
				game.setPrice(resultSet.getFloat("price"));
				game.setQuantityOnHand(resultSet.getInt("quantity_on_hand"));
				game.setQuantityOrdered(resultSet.getInt("quantity_ordered"));
				
				gamesByName.add(game);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return gamesByName;

	}

	@Override
	public int create(Game dataToAdd) {
		int generatedId = 0;

		// try-with-resources auto-closes resources
		try (Connection conn = connUtil.getConnection()) {
			// when you run DML statements, you want to manage the TCL
			conn.setAutoCommit(false);

			String sql = "insert into game (id,name,platform,publisher,price,quantity_on_hand,quantity_ordered) "
					+ "values (default, ?, ?, ?, ?, ?, ?)";
			String[] keys = { "id" }; // the name of the primary key column that will be autogenerated
			// creating the prepared statement
			PreparedStatement pStmt = conn.prepareStatement(sql, keys);
			// we need to set the values of the question marks
			pStmt.setString(1, dataToAdd.getName()); // question mark index starts at 1
			pStmt.setString(2, dataToAdd.getPlatform());
			pStmt.setString(3, dataToAdd.getPublisher());
			pStmt.setFloat(4, dataToAdd.getPrice());
			pStmt.setInt(5, dataToAdd.getQuantityOnHand());
			pStmt.setInt(6, dataToAdd.getQuantityOrdered());
			// after setting the values, we can run the statement
			pStmt.executeUpdate();
			ResultSet resultSet = pStmt.getGeneratedKeys();
			System.out.println("before resultSet.next()");
			if (resultSet.next()) { // "next" goes to the next row in the result set (or the first row)
				// getting the ID value from the result set
				generatedId = resultSet.getInt("id");
				System.out.println(generatedId);
				conn.commit(); // running the TCL commit statement
			} else {
				conn.rollback();
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return generatedId;
	}

	@Override
	public Game getById(int id) {
		Game game = null;

		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from game where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, id);

			ResultSet resultSet = pStmt.executeQuery();

			if (resultSet.next()) {
				game = new Game();
				game.setId(id);
				game.setName(resultSet.getString("name"));
				game.setPlatform(resultSet.getString("platform"));
				game.setPublisher(resultSet.getString("publisher"));
				game.setPrice(resultSet.getFloat("price"));
				game.setQuantityOnHand(resultSet.getInt("quantity_on_hand"));
				game.setQuantityOrdered(resultSet.getInt("quantity_ordered"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return game;

	}

	@Override
	public Set<Game> getAll() {
		Set<Game> allGames = new HashSet<>();

		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from game";
			Statement stmt = conn.createStatement();
			ResultSet resultSet = stmt.executeQuery(sql);

			// while the result set has another row
			while (resultSet.next()) {
				Game game = new Game();
				// pull the data from each row in the result set
				// and put it into the java object so that we can use it here
				//id,name,platform,publisher,price,quantityOnHand,quantityOrdered
				game.setId(resultSet.getInt("id"));
				game.setName(resultSet.getString("name"));
				game.setPlatform(resultSet.getString("platform"));
				game.setPublisher(resultSet.getString("publisher"));
				game.setPrice(resultSet.getFloat("price"));
				game.setQuantityOnHand(resultSet.getInt("quantity_on_hand"));
				game.setQuantityOrdered(resultSet.getInt("quantity_ordered"));
				
				allGames.add(game);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return allGames;
	}

	@Override
	public void update(Game dataToUpdate) {
		try (Connection conn = connUtil.getConnection()) {
			conn.setAutoCommit(false);

			String sql =  "update game set " 
						+ "name=?,platform=?,publisher=?,price=?,quantity_on_hand=?,quantity_ordered=?"
						+ "where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, dataToUpdate.getName()); // question mark index starts at 1
			pStmt.setString(2, dataToUpdate.getPlatform());
			pStmt.setString(3, dataToUpdate.getPublisher());
			pStmt.setFloat(4, dataToUpdate.getPrice());
			pStmt.setInt(5, dataToUpdate.getQuantityOnHand());
			pStmt.setInt(6, dataToUpdate.getQuantityOrdered());
			pStmt.setInt(7, dataToUpdate.getId());
			
			int rowsAffected = pStmt.executeUpdate();

			if (rowsAffected == 1) {
				conn.commit();
			} else {
				conn.rollback();
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	@Override
	public void delete(Game dataToDelete) {
		try (Connection conn = connUtil.getConnection()) {
			conn.setAutoCommit(false);

			String sql = "delete from game " + "where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, dataToDelete.getId());

			int rowsAffected = pStmt.executeUpdate();

			if (rowsAffected == 1) {
				conn.commit();
			} else {
				conn.rollback();
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public Set<Game> getByPlatform(String platform) {
		Set<Game> gamesByPlatform = new HashSet<>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from game where platform=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, platform);
	
			Statement stmt = conn.createStatement();
			ResultSet resultSet = stmt.executeQuery(sql);

			// while the result set has another row
			while (resultSet.next()) {
				Game game = new Game();
				// pull the data from each row in the result set
				// and put it into the java object so that we can use it here
				//id,name,platform,publisher,price,quantityOnHand,quantityOrdered
				game.setId(resultSet.getInt("id"));
				game.setName(resultSet.getString("name"));
				game.setPlatform(resultSet.getString("platform"));
				game.setPublisher(resultSet.getString("publisher"));
				game.setPrice(resultSet.getFloat("price"));
				game.setQuantityOnHand(resultSet.getInt("quantity_on_hand"));
				game.setQuantityOrdered(resultSet.getInt("quantity_ordered"));
				
				gamesByPlatform.add(game);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return gamesByPlatform;
	}

	@Override
	public Set<Game> getByPublisher(String publisher) {
		Set<Game> gamesByPublisher = new HashSet<>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from game where publisher=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, publisher);
	
			Statement stmt = conn.createStatement();
			ResultSet resultSet = stmt.executeQuery(sql);

			// while the result set has another row
			while (resultSet.next()) {
				Game game = new Game();
				// pull the data from each row in the result set
				// and put it into the java object so that we can use it here
				//id,name,platform,publisher,price,quantityOnHand,quantityOrdered
				game.setId(resultSet.getInt("id"));
				game.setName(resultSet.getString("name"));
				game.setPlatform(resultSet.getString("platform"));
				game.setPublisher(resultSet.getString("publisher"));
				game.setPrice(resultSet.getFloat("price"));
				game.setQuantityOnHand(resultSet.getInt("quantity_on_hand"));
				game.setQuantityOrdered(resultSet.getInt("quantity_ordered"));
				
				gamesByPublisher.add(game);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return gamesByPublisher;
	}	
}
